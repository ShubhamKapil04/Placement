#include<iostream>
#include<vector>
#include<string>
using namespace std;

void solve(string str, string output, int index, vector<string> &ans)
{
    //base Case
    if(index >= str.length())     
    {
        ans.push_back(output);
        return ;
    }

    //Exclude Case
    solve(str, output, index+1, ans);

    //Include Case
    char element = str[index];
    output.push_back(element);
    solve(str, output, index+1, ans);
}

int main()
{
    string  str ={"abc"};
    string output;
    int index = 0;
    vector<string> ans;

    solve(str, output, index, ans);

    for(int i = 0; i < ans.size(); i++)
    {
        cout << ans[i] << " ";

    }

    return 0;
}

/*You are given a string 'STR' 
containing lowercase English 
letters from a to z inclusive. 
Your task is to find all non-empty 
possible subsequences of 'STR'.
A Subsequence of a string is the 
one which is generated by deleting 
0 or more letters from the string 
and keeping the rest of the letters 
in the same order.
*/

void solve(string str, string output, int index, vector<string> &ans)
{
	//Base casen
	if(index >= str.length())
	{
		if(output.length() > 0)
		{
			ans.push_back(output);
		}
		return ;
	}
	
	//Exclude
	solve(str, output, index + 1, ans);
	
	//include
	char element = str[index];
	output.push_back(element);
	solve(str, output, index+1, ans);
}

vector<string> subsequences(string str){
	string output;
	int index = 0;
	vector<string> ans;
	solve(str, output, index, ans);	
	return ans;
	
}
